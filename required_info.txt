====================================================================
株式自動売買BOT 実装に必要な外部API情報・サービス詳細
2025-07-18 作成（既存設定確認済み）
====================================================================

このプロジェクトを完成させるために、以下の情報が必要です。
既存設定を確認し、不足している項目のみ記入してください。

┌────────────────────────────────────────────┐
│ 1. J-Quants API 認証情報 ✅確認済み          │
└────────────────────────────────────────────┘

【既存設定確認】
✅ J-Quants API メールアドレス: ohsakitaku@gmail.com (.env内確認)
✅ J-Quants API パスワード: v8Sbr5AiBWcNpAN (.env内確認)
✅ 契約プラン: Standard プラン (仕様書確認済み)
✅ jquantsapi クライアント実装済み (src/data/jquants_client.py)

【追加確認事項】
- リフレッシュトークンの自動更新設定: 有効 要実装（J-Quants APIは1日で期限切れ）

┌────────────────────────────────────────────┐
│ 2. 証券会社API (注文実行用) ⚠️未設定          │
└────────────────────────────────────────────┘

  - 証券会社名: 立花証券
  - API 仕様URL: https://www.e-shiten.jp/e_api/mfds_json_api_refference.html
  - ユーザID: sjy05629
  - パスワード: 5jvkm4v6
  - API確認コード: 多分いらない（idとパスワードで十分）
  - 取引パスワード: 114514

┌────────────────────────────────────────────┐
│ 3. Discord 通知設定 ⚠️未設定                │
└────────────────────────────────────────────┘

【Discord Webhook URL】
- 日次PnL報告用: https://discord.com/api/webhooks/1395773290940858588/KNYmbO7FQSGBiclrAPGgn7KdGKnbWK3gb6ONV9mo_p9ZQAsZsoeMuR2QI8po8lSAZZg1
- 緊急アラート用: https://discord.com/api/webhooks/1395773542506827966/pyGM6Af_k-S-C6aNyuQWLI5E8CcqSnrrR-P4TZvw15Jd3CRcj6PQWN29MKVGoMEui18H
- 学習完了通知用: https://discord.com/api/webhooks/1395773696525991996/S7CUBR9Thn1wzEk7r_VVIn9wqgz3Hs_tWBp3Yikz9T-dJ5Uzw5J9yQ8EmfT8bpBRurUq

【通知設定】
- 通知チャンネル名: レポート報告課,緊急アラート課,ケビン
  （例: trading-bot-reports、alerts、pnl-reports など任意の名前）
- 通知頻度: 日次 15:10 JST + 緊急時随時

┌────────────────────────────────────────────┐
│ 4. 運用資本・リスク設定 ⚠️要設定             │
└────────────────────────────────────────────┘

【運用資本】
- 初期資本額: 100万
✅ 最大ポジション比率: 85% (仕様書設定済み)
⚠️ 1銘柄あたり最大投資額: 8% 
  （現在3%=3万円だが、多くの銘柄で単元株価格が3-5万円のため5-8%推奨）

【リスク許容度】
✅ 最大ドローダウン許容値: 15% (仕様書設定済み)
✅ 緊急停止基準: 15%超過時 (仕様書設定済み)
✅ 注文上限: 100注文/日 (仕様書設定済み)

┌────────────────────────────────────────────┐
│ 5. インフラ設定 ⚠️一部確認                  │
└────────────────────────────────────────────┘

【GPU設定】
✅ 使用GPU: RTX 3070Ti (仕様書確認済み)
- CUDA version: V12.6.20
- PyTorch version: PyTorch version: 2.7.1+cu126

【データベース設定】
✅ PostgreSQL バージョン: 13 (docker-compose.yml確認済み)
✅ データベース名: trading_bot (docker-compose.yml確認済み)
✅ データベースユーザー名: postgres (docker-compose.yml確認済み)
✅ データベースパスワード: postgres (docker-compose.yml確認済み)
⚠️ TimescaleDB 拡張: 未設定 (追加インストール必要)

┌────────────────────────────────────────────┐
│ 6. 外部データソース ✅設定済み               │
└────────────────────────────────────────────┘

✅ 使用しない (J-Quants Standard のみ) - 仕様書確認済み

┌────────────────────────────────────────────┐
│ 7. 開発環境設定 ✅大部分設定済み            │
└────────────────────────────────────────────┘

【Git設定】
✅ GitHub リポジトリ: trading-bot-public (確認済み)
✅ Docker設定: docker-compose.yml実装済み
✅ PostgreSQL, Kafka, Grafana設定済み

【開発ツール確認事項】
- Python version: Python 3.12.10
- Docker version: Docker version 28.3.0
- Docker Compose version: Docker Compose version v2.38.1-desktop.1
  （コマンド: docker compose version で確認してください）

┌────────────────────────────────────────────┐
│ 8. 追加実装が必要な項目                    │
└────────────────────────────────────────────┘

【Phase P3以降の実装項目】
⚠️ turbulence_mom.py - TI, MOM 指標計算
⚠️ distress_rf.py - 財務RF分析
⚠️ allocator.py - 動的アロケーション
⚠️ softmax_lot.py - ロット計算
⚠️ risk_monitor.py - リスク監視
⚠️ ppo_model.py - PPO強化学習
⚠️ 注文執行システム (証券会社API連携)

====================================================================
【優先度順】
1. 🔴 証券会社API設定 (注文実行に必須)
2. 🔴 Discord通知設定 (監視に必須)
3. 🔴 運用資本額設定 (リスク管理に必須)
4. 🟡 GPU環境確認 (学習最適化)
5. 🟡 TimescaleDB拡張 (データ最適化)

上記の🔴項目を記入後、再度取り込んでください。
====================================================================